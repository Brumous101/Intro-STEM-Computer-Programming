v.02

LISTS

The LIST value type is designed to hold
values in an ORDERED COLLECTION. Lists are
very flexible and they are one of the most heavily
used value types in MathPiper. Lists can HOLD
VALUES OF ANY TYPE, they can GROW AND SHRINK
AS NEEDED, and they can be NESTED. Values in
a list can be ACCESSED BY THEIR POSITION in the
list (similar to the way that characters in a
string are accessed) and they can also be REPLACED
BY OTHER VALUES.

One way to create a list is by placing zero or
more expressions separated by commas inside of a
PAIR OF BRACKETS []. When this notation is present
in a program's source code, it is called a LIST
LITERAL. In the following example, a list is
created that contains various expressions and then
it is assigned to the variable exampleList:

%mathpiper

exampleList := [7,42,"Hello",1/2,_var];

%/mathpiper



%mathpiper

exampleList;

%/mathpiper



Recall that pairs of brackets are also used to
index into strings. Ideally, different kinds of
brackets would be used for these two purposes.
Unfortunately, since computer keyboards only
provide three kinds of bracets, which are (), {},
and [], these brackets often need to be used for
more than one purpose in a programming language.

The number of values in a list can be
determined with the Length() procedure:

%mathpiper

Length([7,42,"Hello",1/2,_var]);

%/mathpiper



%mathpiper

s := "Hello";

%/mathpiper



%mathpiper

Length(s);

%/mathpiper


A single value in a list can be accessed by
placing a set of BRACKETS [] to the right of the
variable that is assigned to the list and then
putting the value's position number inside of
the brackets (NOTE: THE FIRST VALUE IN THE
LIST IS AT POSITION 1 COUNTING FROM THE LEFT END
OF THE LIST):

%mathpiper

exampleList[1];

%/mathpiper



%mathpiper

exampleList[2];

%/mathpiper



%mathpiper

exampleList[3];

%/mathpiper



%mathpiper

exampleList[4];

%/mathpiper



%mathpiper

exampleList[5];

%/mathpiper



The 1st and 2nd values in this list are
integers, the 3rd values is a string, the 4th
value is a rational number and the 5th
value is an unassigned variable.

Lists can also hold other lists as shown in the
following example:

%mathpiper

exampleList := [20, 30, [31, 32, 33], 40];

%/mathpiper



%mathpiper

exampleList[1];

%/mathpiper



%mathpiper

exampleList[2];

%/mathpiper



%mathpiper

exampleList[3];

%/mathpiper



%mathpiper

exampleList[4];

%/mathpiper


 
The value in the 3rd position in the list is
another list that contains the integers 31, 32,
and 33.

A value in this second list can be accessed
by TWO SETS OF BRACKETS:

%mathpiper

exampleList[3][2];

%/mathpiper



The 3 inside of the FIRST SET OF BRACKETS accesses
the 3rd member of the first list and the 2 inside
of the SECOND SET OF BRACKETS accesses the 2nd
member of the second list.



THE Append!() PROCEDURE

--------- Calling Format --------------
Append!(list, expression)
---------------------------------------

The Append!() procedure adds a value to the end of
a list:

%mathpiper

testList := [21,22,23];

%/mathpiper



%mathpiper

Append!(testList, 24);

%/mathpiper





%mathpiper

testList;

%/mathpiper

