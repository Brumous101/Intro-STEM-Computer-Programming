V.03

RANDOM INTEGER VALUES

It is often useful to use random integers in a
program. For example, a program may need to
simulate the rolling of dice in a game. In this
section, a procedure for randomly obtaining
nonnegative integers is discussed along with how
to use it to simulate the rolling of dice.


OBTAINING RANDOM INTEGERS WITH THE RandomInteger() PROCEDURE

One way that a MathPiper program can generate
random integers is with the RandomInteger()
procedure. The RandomInteger() procedure takes an
integer as an argument and it returns a random
integer between 1 and the passed in integer. The
following example shows random integers between 1
and 5 inclusive being obtained from
RandomInteger(). INCLUSIVE here means that both 1
and 5 are included in the range of random integers
that may be returned. If the word EXCLUSIVE was
used instead, this would mean that neither 1 nor 5
would be in the range.

%mathpiper

RandomInteger(5);

%/mathpiper



%mathpiper

RandomInteger(5);

%/mathpiper



%mathpiper

RandomInteger(5);

%/mathpiper



%mathpiper

RandomInteger(5);

%/mathpiper



%mathpiper

RandomInteger(5);

%/mathpiper




Random integers between 1 and 100 can be generated
by passing 100 to RandomInteger():

%mathpiper

RandomInteger(100);

%/mathpiper



%mathpiper

RandomInteger(100);

%/mathpiper



%mathpiper

RandomInteger(100);

%/mathpiper



%mathpiper

RandomInteger(100);

%/mathpiper



%mathpiper

RandomInteger(100);

%/mathpiper



A range of random integers that does not start
with 1 can also be generated by using the TWO
ARGUMENT version of RandomInteger(). For example,
random integers between 25 and 75 can be obtained
by passing RandomInteger() the lowest integer in
the range and the highest one:

%mathpiper

RandomInteger(25, 75);

%/mathpiper



%mathpiper

RandomInteger(25, 75);

%/mathpiper



%mathpiper

RandomInteger(25, 75);

%/mathpiper



%mathpiper

RandomInteger(25, 75);

%/mathpiper



%mathpiper

RandomInteger(25, 75);

%/mathpiper




SIMULATING THE ROLLING OF DICE

The following example shows the simulated rolling
of a single six sided die using the
RandomInteger() procedure:

%mathpiper

RandomInteger(6);

%/mathpiper



%mathpiper

RandomInteger(6);

%/mathpiper



%mathpiper

RandomInteger(6);

%/mathpiper



%mathpiper

RandomInteger(6);

%/mathpiper



%mathpiper

RandomInteger(6);

%/mathpiper



Code that simulates the rolling of two 6 sided
dice can be evaluated in the MathPiper console by
placing it within a CODE SEQUENCE. The following
code outputs the sum of the two simulated dice:

%mathpiper,globalStateShow="true",flowchart="false"

{a := RandomInteger(6); b := RandomInteger(6); a + b;}

%/mathpiper



%mathpiper,globalStateShow="true",flowchart="false"

{a := RandomInteger(6); b := RandomInteger(6); a + b;}

%/mathpiper



%mathpiper,globalStateShow="true",flowchart="false"

{a := RandomInteger(6); b := RandomInteger(6); a + b;}

%/mathpiper



%mathpiper,globalStateShow="true",flowchart="false"

{a := RandomInteger(6); b := RandomInteger(6); a + b;}

%/mathpiper




Now that we have the ability to simulate the
rolling of two 6 sided dice, it would be
interesting to determine if some sums of these
dice occur more frequently than other sums. What
we would like to do is to roll these simulated
dice hundreds (or even thousands) of times and
then analyze the sums that were produced. We don't
have the programming capability to easily do this
yet, but after we finish the section on WHILE
LOOPS, we will.
